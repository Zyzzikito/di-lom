import {
  Reservation,
  Slot,
  Student,
  SubjectTeacher,
  Teacher,
} from '../../models.js'
import { dateRuFormatter } from '../../constants.js'
import SubjectService from '../../services/SubjectService.js'
import ReservationService from '../../services/ReservationService.js'
import SlotService from '../../services/SlotService.js'
import SubjectTeacherService from '../../services/SubjectTeacherService.js'
import TeacherService from '../../services/TeacherService.js'
import {
  bot_student,
  bot_teacher,
  inputSlotData,
  setInputSlotData,
  setTimes,
  times,
} from '../../index.js'

class CallbackQueries {
  async handleSubject(ctx, subjectIdString) {
    const subjectId = Number(subjectIdString)
    const teachers = await TeacherService.getTeachersBySubjectId(subjectId)
    const subject = await SubjectService.getSubjectById(subjectId)

    await ctx.reply(' üìò –ü—Ä–µ–¥–º–µ—Ç: ' + subject.name)

    teachers.map((teacher) => {
      const description = teacher.description
        ? teacher.description
        : '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
      const price = teacher.price ? teacher.price : '–£—Ç–æ—á–Ω–∏—Ç–µ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞'
      ctx.reply(teacher.name + '\n' + description + '\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ' + price, {
        reply_markup: {
          inline_keyboard: TeacherService.getTeacherKeyboard(
            teacher.id,
            subject.id,
          ),
        },
      })
    })
  }

  async handleTeacher(ctx, value, value2) {
    const teacherId = Number(value)
    const { name, fullDescription } = await Teacher.findByPk(teacherId)

    const subjectId = Number(value2)
    const subjectTeacher = await SubjectTeacherService.getSubjectTeacherId(
      subjectId,
      teacherId,
    )

    ctx.reply(
      `${name}\n${
        fullDescription ? fullDescription : '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
      }`,
      {
        reply_markup: {
          inline_keyboard: SubjectTeacherService.getSubjectTeacherKeyboard(
            subjectTeacher.id,
          ),
        },
      },
    )
  }

  async handleBookLesson(ctx, subjectTeacherId) {
    ctx.reply('–î–Ω–∏ –Ω–µ–¥–µ–ª–∏', {
      reply_markup: {
        inline_keyboard: await SlotService.generateNotExistDaysWeekKeyboard(
          subjectTeacherId,
        ),
      },
    })
  }

  async handleDayWeek(ctx, value, value2) {
    const [month, day, year] = value.split('/')
    const reservations = await ReservationService.getAllReservations()

    const avaliableSlots = await SlotService.getAvaliableSlots(
      Number(value2),
      { year, day, month },
      reservations,
    )

    const errors = SlotService.validateAvaliableSlots(avaliableSlots)

    if (errors.length !== 0) {
      errors.forEach((er) => ctx.reply(er))
      return
    }

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ ' + dateRuFormatter.format(new Date(value)), {
      reply_markup: {
        inline_keyboard: SlotService.getAvaliableSlotsKeyboard(avaliableSlots),
      },
    })
  }

  async handleTime(ctx, value, userId) {
    const slotId = Number(value)

    if (!userId) {
      ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
      return
    }

    const alreadyReserved = await ReservationService.getIsAlreadyReserved(
      slotId,
    )

    if (alreadyReserved) {
      ctx.reply('–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è')
      return
    }

    await ReservationService.createReservation(slotId, userId, 'offline')

    ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
  }

  async handleCancelReservation(ctx, value) {
    await ReservationService.deleteReservation(Number(value))
    ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
  }

  async handleCreateSlotForm(ctx, date) {
    setInputSlotData(date)

    ctx.reply(`–ó–∞—è–≤–∫–∞ –Ω–∞ ${date}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
10:00-11:30`)
  }

  async handleChooseSubjectAndCreateSlot(ctx, subjectIdString, userId) {
    const subjectId = Number(subjectIdString)

    if (!times || !inputSlotData) {
      ctx.reply('–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–µ')
      setTimes(null)
      setInputSlotData(null)
      return
    }

    let subjectTeacher = await SubjectTeacherService.getSubjectTeacherId(
      subjectId,
      userId,
    )
    if (!subjectTeacher) {
      await SubjectTeacherService.createSubjectTeacher(subjectId, userId)
      subjectTeacher = await SubjectTeacherService.getSubjectTeacherId(
        subjectId,
        userId,
      )
    }

    await SlotService.createSlot(
      times,
      new Date(inputSlotData),
      subjectTeacher.id,
    )

    ctx.reply('–°–ª–æ—Ç —Å–æ–∑–¥–∞–Ω')

    setTimes(null)
    setInputSlotData(null)
  }

  async handleDeleteSlot(ctx, slotId) {
    if (!slotId) return ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ—Ç')
    await SlotService.deleteSlot(Number(slotId))
    ctx.reply('–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω')
  }

  async approveReservation(ctx, reservationId) {
    const reservation = await Reservation.findByPk(Number(reservationId), {
      raw: true,
      nest: true,
      include: [
        Student,
        {
          model: Slot,
          include: [
            {
              model: SubjectTeacher,
              include: [Teacher],
            },
          ],
        },
      ],
    })

    reservation.approved = true

    await Reservation.update(reservation, {
      where: {
        id: reservation.id,
      },
    })
    // await ctx.deleteMessage()
    ctx.reply('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞')
    await bot_student.telegram.sendMessage(
      reservation.Student.id,
      `@${reservation.Slot.SubjectTeacher.Teacher.username} –ø—Ä–∏–Ω—è–ª —É –≤–∞—Å –∑–∞—è–≤–∫—É\n–ù–∞ –≤—Ä–µ–º—è: ${reservation.Slot.startTime}:${reservation.Slot.endTime}, ${reservation.Slot.date}`,
    )
  }

  async cancelReservation(ctx, reservationId) {
    const reservation = await Reservation.findByPk(Number(reservationId), {
      raw: true,
      nest: true,
      include: [
        Student,
        {
          model: Slot,
          include: [
            {
              model: SubjectTeacher,
              include: [Teacher],
            },
          ],
        },
      ],
    })

    if (!reservation) {
      ctx.reply('–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
      return
    }

    Reservation.destroy({
      where: {
        id: reservation.id,
      },
    })

    bot_student.telegram.sendMessage(
      reservation.Student.id,
      `@${reservation.Slot.SubjectTeacher.Teacher.username} –æ—Ç–∫–ª–æ–Ω–∏–ª —É –≤–∞—Å –∑–∞—è–≤–∫—É\n–ù–∞ –≤—Ä–µ–º—è: ${reservation.Slot.startTime}:${reservation.Slot.endTime}, ${reservation.Slot.date}`,
    )

    ctx.reply('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
  }
}

export default new CallbackQueries()
