import {initDatabase} from "./database.js";
import {Telegraf} from "telegraf";
import {Reservation, sequelize, Slot, Student, Subject, SubjectTeacher, Teacher,} from "./models.js";
import {generateDaysWeekKeyboard} from "./generate-days-week-keyboard.js";
import {dateRuFormatter} from "./constants.js";
import {Op} from "sequelize";
// const TOKEN = "7185054995:AAGWu8MRHmiPFdXwo8QJErf87zhr5eOxjXM";
const TOKEN = "6810110321:AAHqZrowFdcW52HY6VrrawhnWXBThQFDGJI";

initDatabase();

let user = null;

const authStudent = async (msg) => {
    if (user === null) {
        const telegramId = msg.message.chat.id;

        const student = await Student.findOne({
            where: {
                telegramId,
            },
        });

        console.log(student)

        if (student) {
            user = {
                role: "STUDENT",
                ...student,
            };
            return;
        }
        const newStudent = {
            name: "–ò–≤–∞–Ω",
            surname: "–ò–≤–∞–Ω–æ–≤",
            patronymic: "–ò–≤–∞–Ω–æ–≤–∏—á",
            telegramId,
        };

        const createdStudent = await Student.create(newStudent);
        user = {
            role: "STUDENT",
            ...createdStudent,
        };
    }
};

const bot = new Telegraf(TOKEN, {});
const commands = [
    {
        command: "reservations",
        description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π",
    },
    {
        command: "school_subject",
        description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
    },
]

bot.telegram.setMyCommands(commands);
bot.command("school_subject", async (ctx) => {
    await authStudent(ctx);
    const subjects = await Subject.findAll();

    const keyboard = subjects.map(({id, name}) => {
        return [{text: name, callback_data: "subject:" + id}];
    });

    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", {
        reply_markup: {
            inline_keyboard: keyboard,
        },
    });
});
bot.command("reservations", async (ctx) => {
    await authStudent(ctx);

    const reservations = await Reservation.findAll({
        raw: true,
        nest: true,
        order: [["approved", "DESC"]],
        include: [{
            model: Slot,
            include: [{
                model: SubjectTeacher,
                include: [{
                    model: Subject,
                    attributes: ['name']
                }, {
                    model: Teacher,
                    attributes: ['name', 'surname', 'patronymic']
                }]
            }]
        }]
    })

    await ctx.reply("–í—Å–µ –∑–∞—è–≤–∫–∏:")


    reservations.forEach((reservation) => {
        const slot = reservation.Slot;
        const subjectTeacher = slot.SubjectTeacher;
        const subject = subjectTeacher.Subject;
        const teacher = subjectTeacher.Teacher;
        const fullDescription = `<b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä:</b> ${teacher.name} ${teacher.surname} ${teacher.patronymic}\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> ${subject.name}\n<b>–î–∞—Ç–∞:</b> ${dateRuFormatter.format(reservation.date)} \n<b>–í—Ä–µ–º—è:</b> ${slot.startTime} - ${slot.endTime}\n\n${reservation.approved ? "–ü—Ä–∏–Ω—è—Ç–∞" : "–ù–µ –ø—Ä–∏–Ω—è—Ç–∞"}`;
        ctx.reply(fullDescription, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [[{
                    text: "–û—Ç–º–µ–Ω–∞",
                    callback_data: "cancel_reservation:" + reservation.id
                }]]
            }
        })
    })
})
bot.on("message", async (msg) => {
    await authStudent(msg);

    msg.reply(`–ü–†–ò–í–ï–ï–ï–¢ üòä 

–Ø - –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ ü§ñ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å ü§ù. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç:
 üîπ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ üìÖ;
 üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ üë•;
 üîπ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π üí∏

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–ª—é –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ü§î.

${commands.map((command) => {
        return `/${command.command} - ${command.description}`;
    }).join("\n")
    }
`);
});

bot.on("callback_query", async (ctx) => {
    const data = ctx.callbackQuery.data;

    const [key, value, value2] = data.split(":");
    console.log(key, value, value2);

    switch (key) {
        case "subject":
            try {
                const teachers = await Teacher.findAll({
                    raw: false,
                    nest: true,
                    include: [
                        {
                            model: SubjectTeacher,
                            where: {
                                subjectId: Number(value),
                            },
                        },
                    ],
                });
                const {name, id} = await Subject.findByPk(Number(value));

                await ctx.reply(" üìò –ü—Ä–µ–¥–º–µ—Ç: " + name);

                teachers.map((teacher) => {
                    ctx.reply(teacher.name + "\n" + teacher.description, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                                        callback_data: ["teacher", teacher.id, id].join(":"),
                                    },
                                ],
                            ],
                        },
                    });
                });
            } catch (e) {
                console.error(e);
            }

            break;
        case "teacher": {
            const teacherId = Number(value);
            const {name, surname, patronymic, fullDescription} =
                await Teacher.findByPk(teacherId);

            const subjectId = Number(value2);
            const subjectTeacher = await SubjectTeacher.findOne({
                where: {
                    subjectId,
                    teacherId,
                },
            });

            ctx.reply(`${surname} ${name} ${patronymic}\n${fullDescription}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫",
                                callback_data: ["book_lesson", subjectTeacher.id].join(":"),
                            },
                        ],
                    ],
                },
            });
            break;
        }
        case "book_lesson":
            ctx.reply("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", {
                reply_markup: {
                    inline_keyboard: generateDaysWeekKeyboard(value),
                },
            });
            break;
        case "day_week": {
            const [month, day, year] = value.split("/");
            const reservations = await Reservation.findAll({
                attributes: [
                    [sequelize.fn("DISTINCT", sequelize.col("slotId")), "slotId"],
                ],
            });
            const avaliableSlots = await Slot.findAll({
                where: {
                    subjectTeacherId: Number(value2),
                    date: [year, month, day].join("-"),
                    id: {
                        [Op.notIn]: reservations.map((row) => row.slotId),
                    },
                },
            });

            if (avaliableSlots.length === 0) {
                ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç");
                break;
            }

            ctx.reply(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ " + dateRuFormatter.format(new Date(value)),
                {
                    reply_markup: {
                        inline_keyboard: [
                            ...avaliableSlots.map((slot) => [
                                {
                                    text: [slot.startTime, slot.endTime].join("-"),
                                    callback_data: `time:${slot.id}`,
                                },
                            ]),
                        ],
                    },
                }
            );
            break;
        }
        case "time":
            const slotId = Number(value);

            if (!user) {
                ctx.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
                break;
            }

            const alreadyReserved = await Reservation.findOne({
                where: {
                    slotId: slotId,
                }
            })

            if (alreadyReserved) {
                ctx.reply("–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è");
                break
            }

            await Reservation.create({
                slotId,
                format: 'offline',
                studentId: user.id,
                approved: false,
            })

            ctx.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");

            break;

        case "cancel_reservation":
            await Reservation.destroy({
                where: {
                    id: Number(value),
                },
            });
            ctx.reply("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            break;
    }

    ctx.answerCbQuery();
});

bot.launch();
